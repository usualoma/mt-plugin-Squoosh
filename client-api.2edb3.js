(self.webpackJsonp=self.webpackJsonp||[]).push([[2],{58:function(e,s,t){"use strict";t.r(s),t.d(s,"exposeAPI",function(){return r}),t.d(s,"API",function(){return i});var n=t(55),o=t(31);function r(e){window!==top&&(self.parent.postMessage({type:"READY",version:"1"},"*"),self.addEventListener("message",e=>{"READY?"===e.data&&(e.stopImmediatePropagation(),self.parent.postMessage({type:"READY",version:"1"},"*"))}),Object(o.a)(new i(e),self.parent))}function a(e,s){return document.addEventListener(e,s),()=>document.removeEventListener(e,s)}class i{constructor(e){this._app=e}setFile(e,s){return new Promise(t=>{document.addEventListener(n.SquooshStartEventType.START,()=>t(),{once:!0}),this._app.openFile(new File([e],s))})}async getBlob(e){if(!this._app.state.file||!this._app.compressInstance)throw new Error("No file has been loaded");if(!this._app.compressInstance.state.loading&&!this._app.compressInstance.state.sides[e].loading)return this._app.compressInstance.state.sides[e].file;const s=[],t=new Promise((t,n)=>{s.push(a("squoosh:done",s=>{s.side===e&&t(this._app.compressInstance.state.sides[e].file)})),s.push(a("squoosh:abort",s=>{s.side===e&&n(new DOMException("Aborted","AbortError"))})),s.push(a("squoosh:error",s=>{s.side===e&&n(s.error)}))});return t.then(()=>s.forEach(e=>e())),t}}}}]);
//# sourceMappingURL=client-api.2edb3.js.map